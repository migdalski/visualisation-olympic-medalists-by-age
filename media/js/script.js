// Generated by CoffeeScript 1.10.0
(function () {
    var DEFAULT_SELECTED, FLAGS, GENDER, chart, collide, events, flag, format_age, i, len;

    DEFAULT_SELECTED = ["100 metres", "400 metres", "800 metres", "1,500 metres", "10,000 metres", "100/110 metres Hurdles", "400 metres Hurdles", "3,000 metres Steeplechase", "50 kilometres Walk", "High Jump", "Long Jump", "Shot Put", "Heptathlon/Decathlon"];

    GENDER = {
        "Male": "fa-mars",
        "Female": "fa-venus"
    };

    collide = function (input_dot, dots) {
        var distance, dot, i, input_dot_r, input_dot_x, input_dot_y, len, radius, x, y;
        input_dot_y = input_dot.attributes.cy.ownerElement.cy.baseVal.value;
        input_dot_x = input_dot.attributes.cx.ownerElement.cx.baseVal.value;
        input_dot_r = input_dot.attributes.r.ownerElement.r.baseVal.value;
        for (i = 0, len = dots.length; i < len; i++) {
            dot = dots[i];
            if (dot === input_dot) {
                return false;
            }
            x = Math.abs(dot.attributes.cy.ownerElement.cy.baseVal.value - input_dot_y);
            y = Math.abs(dot.attributes.cy.ownerElement.cx.baseVal.value - input_dot_x);
            distance = Math.sqrt(x * x + y * y);
            radius = Math.abs(dot.attributes.r.ownerElement.r.baseVal.value + input_dot_r);
            if (distance < radius / 1.6) {
                return true;
            }
        }
        return false;
    };

    format_age = function (age) {
        var days, years;
        years = Math.floor(age);
        days = Math.floor((age - years) * 365);
        return years + " years " + days + " days";
    };

    d3.queue().defer(d3.csv, "data/data.csv").defer(d3.csv, "data/flags.csv").await(function (error, data, flags) {
    });

    FLAGS = {};

    for (i = 0, len = flags.length; i < len; i++) {
        flag = flags[i];
        FLAGS[flag.code] = flag.flag_url;
    }

    events = Array.from(new Set(data.map(function (item) {
        return item.event;
    })));

    chart = c3.generate({
        data: {
            json: data,
            keys: {
                x: 'event',
                value: ['age']
            },
            type: 'scatter',
            types: {
                data1: 'bar'
            },
            xSort: false
        },
        axis: {
            rotated: true,
            x: {
                show: true,
                type: 'category',
                categories: events,
                tick: {
                    multiline: false
                }
            },
            y: {
                min: 16,
                max: 45
            }
        },
        size: {
            height: 800
        },
        grid: {
            x: {
                show: true
            },
            y: {
                show: true
            }
        },
        legend: {
            show: false
        },
        tooltip: {
            sorted: false,
            grouped: false,
            contents: function (d) {
                var $$, text;
                $$ = this;
                text = "<table class='" + $$.CLASS.tooltip + "'><tr><th colspan='2'>" + d[0].data.name + "</th></tr>";
                text += "<tr><td class='value'>Event</td><td class='name'>" + d[0].data.event + "</td></tr>";
                text += "<tr><td class='value'>Olympic</td><td class='name'>" + d[0].data.olympic + "</td></tr>";
                text += "<tr><td class='value'>Place</td><td class='name'><i class='fa fa-circle place-" + d[0].data.place + "' aria-hidden='true'></i> " + d[0].data.place + "</td></tr>";
                text += "<tr><td class='value'>Age</td><td class='name'>" + (format_age(parseFloat(d[0].data.age))) + "</td></tr>";
                text += "<tr><td class='value'>Gender</td><td class='name'><i class='fa " + GENDER[d[0].data.gender] + "' aria-hidden=''true'></i> " + d[0].data.gender + "</td></tr>";
                text += "<tr><td class='value'>Country</td><td class='name'>";
                if (d[0].data.country in FLAGS) {
                    text += "<img class='flag' src='" + FLAGS[d[0].data.country] + "' /> ";
                }
                text += d[0].data.country + "</td></tr>";
                text += "<table>";
                return text;
            }
        },
        oninit: function () {
            var index, j, len1, ref, results, value;
            ref = this.data.targets[0].values;
            results = [];
            for (index = j = 0, len1 = ref.length; j < len1; index = ++j) {
                value = ref[index];
                results.push(value.data = this.config.data_json[index]);
            }
            return results;
        },
        onrendered: function () {
            var circle, circles, dot, j, key, len1, ref, results, s, start_y_value, step, value;
            circles = d3.selectAll(".c3-chart-lines > .c3-chart-line > .c3-circles > circle");
            events = {};
            ref = circles[0];
            for (j = 0, len1 = ref.length; j < len1; j++) {
                circle = ref[j];
                if (!(circle.attributes.cy.nodeValue in events)) {
                    events[circle.attributes.cy.nodeValue] = new Array();
                }
                events[circle.attributes.cy.nodeValue].push(circle);
            }
            results = [];
            for (key in events) {
                value = events[key];
                results.push((function () {
                    var k, len2, results1;
                    results1 = [];
                    for (k = 0, len2 = value.length; k < len2; k++) {
                        dot = value[k];
                        step = 0;
                        start_y_value = dot.attributes.cy.ownerElement.cy.baseVal.value;
                        results1.push((function () {
                            var results2;
                            results2 = [];
                            while (collide(dot, value)) {
                                s = Math.pow(-1, step) * Math.ceil(step / 2);
                                dot.setAttribute("cy", start_y_value + s);
                                results2.push(step += 1);
                            }
                            return results2;
                        })());
                    }
                    return results1;
                })());
            }
            return results;
        }
    });

}).call(this);

//# sourceMappingURL=script.js.map
